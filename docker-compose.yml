networks:
  my-network:
    driver: bridge

services:
  discovery-service:
    image: ghcr.io/leang302/discovery-service:latest
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - my-network
    restart: unless-stopped

  config-server:
    image: ghcr.io/leang302/config-server:latest
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - my-network
    restart: unless-stopped
    depends_on:
      - discovery-service
      
  product-db:
    image: postgres:15
    container_name: product-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: productdb
    ports:
      - "5432:5432"
    volumes:
      - product-db-data:/var/lib/postgresql/data
    networks:
      - my-network
    restart: unless-stopped

  user-db:
    image: postgres:15
    container_name: user-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: userdb
    ports:
      - "5433:5432"
    volumes:
      - user-db-data:/var/lib/postgresql/data
    networks:
      - my-network
    restart: unless-stopped

  category-db:
    image: postgres:15
    container_name: category-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: categorydb
    ports:
      - "5434:5432"
    volumes:
      - category-db-data:/var/lib/postgresql/data
    networks:
      - my-network
    restart: unless-stopped
    
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: user-db
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: userdb
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: 123
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_HTTP_ENABLED: false       # disable HTTP
      KC_HOSTNAME_STRICT: true
      KC_HOSTNAME: 34.126.135.232 # your public IP or domain
      KC_PROXY: edge               # tell KC it's behind reverse proxy
    networks:
      - my-network
    restart: unless-stopped
    depends_on:
      - user-db
      
  # auth-service:
  #   image: ghcr.io/leang302/auth-service:latest
  #   container_name: auth-service
  #   networks:
  #     - my-network
  #   restart: unless-stopped
  #   depends_on:
  #     - discovery-service
  #     - config-server
  #     - user-db
  #     - keycloak

  # product-service:
  #   image: ghcr.io/leang302/product-service:latest
  #   container_name: product-service
  #   networks:
  #     - my-network
  #   restart: unless-stopped
  #   depends_on:
  #     - discovery-service
  #     - config-server
  #     - product-db

  # category-service:
  #   image: ghcr.io/leang302/category-service:latest
  #   container_name: category-service
  #   networks:
  #     - my-network
  #   restart: unless-stopped
  #   depends_on:
  #     - discovery-service
  #     - config-server
  #     - category-db

  # api-gateway:
  #   image: ghcr.io/leang302/api-gateway:latest
  #   container_name: api-gateway
  #   networks:
  #     - my-network
  #   restart: unless-stopped
  #   depends_on:
  #     - discovery-service
  #     - config-server
  #     - keycloak

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"   # API port
      - "9001:9001"   # Console UI port
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    networks:
      - my-network
    restart: unless-stopped
    
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/ssl/certs:ro
    networks:
      - my-network
    depends_on:
      # - api-gateway
      - keycloak
      - minio

volumes:
  product-db-data:
  user-db-data:
  category-db-data:
  minio-data:
